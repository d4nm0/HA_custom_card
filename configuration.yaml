
# Loads default set of integrations. Do not remove.
default_config:

# Load frontend themes from the themes folder
frontend:
  themes: !include_dir_merge_named themes

automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
#sensor: !include sensors.yaml
#template: !include templates.yaml

delete:

homeassistant:
    media_dirs:  # on indique ou se trouve les média sur HA
        local: "/media"

#Free SMS

notify:
  - name: SMS_FREE
    platform: free_mobile
    username: <userId>
    access_token: !secret free
  - name: HASS_AGENT
    platform: rest
    resource: "http://<adresse_ip_de_votre_appareil>:5115/notify"
    method: POST
    headers:
      Authorization: 'Bearer <API_Key>'
      Content-Type: 'application/json'

homekit:
  name: Home Assistant Bridge


logger:
  logs:
    custom_components.eufy_security: debug

template:
  - sensor:
      - name: 'SpeedTest CLI Ping'
        unique_id: speedtest_cli_ping
        icon: mdi:speedometer
        unit_of_measurement: ms
        state_class: measurement
        state: "{{ (states('sensor.speedtest_cli_data') | from_json).ping | round(2) }}"
        
      - name: 'SpeedTest CLI Download'
        unique_id: speedtest_cli_download
        icon: mdi:speedometer
        unit_of_measurement: Mbit/s
        state_class: measurement
        state: "{{ ((states('sensor.speedtest_cli_data') | from_json).download * 8 / 1000 / 1000) | round(2) }}"
        
      - name: 'SpeedTest CLI Upload'
        unique_id: speedtest_cli_upload
        icon: mdi:speedometer
        unit_of_measurement: Mbit/s
        state_class: measurement
        state: "{{ ((states('sensor.speedtest_cli_data') | from_json).upload * 8 / 1000 / 1000) | round(2) }}"
        
      # Calcul Machine a laver
      - name: "Comptage Machine a laver"
        unique_id: machine_laver_time
        state: >
            {% set debut_machine = as_timestamp(states('input_datetime.debut_machine')) %}
            {% set fin_machine = as_timestamp(states('input_datetime.fin_machine')) %}
            {% set duree_derniere_machine = fin_machine - debut_machine %}
            {% set duree_derniere_machine_h = (duree_derniere_machine | float // 60) | round(0) %}
            {% if fin_machine < debut_machine %}
              En cours
            {% else %}
              {{ (duree_derniere_machine_h | int * 60)|timestamp_custom('%-Hh et %-Mm', false) }}
            {% endif %}
            
      



command_line:
  - sensor:
      name: "SpeedTest CLI Data"
      unique_id: speedtest_cli_data
      command: "/config/3rdparty/speedtest/speedtest --format=json --accept-license --accept-gdpr"
      #Toutes les 4 heures, 60 * 60 * 4 = 14400  3600 = 1 heure
      scan_interval: 3600
      command_timeout: 60
      value_template: >-
        {{ 
          { 
            "ping": value_json.ping.latency, 
            "download": value_json.download.bandwidth, 
            "upload": value_json.upload.bandwidth 
          }
          | to_json 
        }}

sensor:
  - platform: rest
    name: Public IP
    resource: https://api.ipify.org?format=json
    value_template: "{{ value_json.ip }}"
    scan_interval: 3600  # Rafraîchir toutes les heures
  - platform: plex_recently_added
    token: feVTT2L-9KA3BpsPZcUz
    host: 192.168.1.33
    port: 32400
  - platform: history_stats
    name: Cat Enters Last 24 Hours
    entity_id: sensor.smart_litter_box_history
    state: 22
    type: count
    start: "{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}"
    duration:
      hours: 24
